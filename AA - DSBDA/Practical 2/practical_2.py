# -*- coding: utf-8 -*-
"""Practical 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OHZxpNBykFtR-Fff8WZHv45vhxPAeMRz

Data Wrangling II
Create an “Academic performance” dataset of students and perform the following operations using
Python.
1. Scan all variables for missing values and inconsistencies. If there are missing values and/or
inconsistencies, use any of the suitable techniques to deal with them.
2. Scan all numeric variables for outliers. If there are outliers, use any of the suitable
techniques to deal with them.
3. Apply data transformations on at least one of the variables. The purpose of this
transformation should be one of the following reasons: to change the scale for better
understanding of the variable, to convert a non-linear relation into a linear one, or to
decrease the skewness and convert the distribution into a normal distribution.
Reason and document your approach properly.
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

import pandas as pd

df = pd.read_csv("/content/sample_data/AcademicPerformance.csv")

print(df)

print(df["math score"])

print(df['math score'].isnull())

print(df['reading score'])

print(df['reading score'].isnull())

dataset = [11,41,20, 3, 101, 55, 68, 97,99,6]

sorted(dataset)

quartile1 , quartile3 = np.percentile(dataset, [25, 75])

print(quartile1, quartile3)

iqr = quartile3 - quartile1

print(iqr)

lower_bound_value = quartile1 - (1.5 * iqr)
upper_bound_value = quartile3 + (1.5 * iqr)

print(lower_bound_value, upper_bound_value)

"""Extract the year of admission from the 'Dt_Admission' column and store it in a new column called 'Year'."""

from datetime import date
df['age'] = date.today().year - df['Year_Birth']

"""Calculate the elapsed time since admission by subtracting the admission year from the current year, and store it in a new column called 'E_L'."""

df['Year'] = pd.DatetimeIndex(df['Dt_Admission']).year
df['E_L'] = date.today().year-df['Year']

df.head(5)

df['Fees$'] = df['College_Fees'].str.replace(',', '').str.replace('$', '').str.replace('.', '').fillna(0).astype(int)
df['Fees_M$'] = df['Fees$'].apply(lambda X:round(X/1000000))

df

df.head(5)

